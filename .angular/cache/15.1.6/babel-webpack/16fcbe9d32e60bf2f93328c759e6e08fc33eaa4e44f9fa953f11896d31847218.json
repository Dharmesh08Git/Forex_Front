{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./alert.service\";\nexport class AdminService {\n  constructor(api, alert) {\n    this.api = api;\n    this.alert = alert;\n  }\n  addRate(payload) {\n    this.api.post(`/admin/exchangeRate/save`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  addBankAccount(payload) {\n    this.api.post(`/UserBankDetails/save`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  updateBankAccount(payload) {\n    this.api.put(`/UserBankDetails/update`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  getRates() {\n    return this.api.get(`/admin/rate/all`);\n  }\n  getUsers() {\n    return this.api.get('/admin/users/all');\n  }\n  getAllTransactions() {\n    return this.api.get('/transaction/all');\n  }\n  convertRate(payload) {\n    return this.api.post('/rate/convert', payload);\n  }\n  resetPassword(payload) {\n    this.api.put(`/admin/reset-password`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  deleteUser(userId) {\n    this.api.delete(`/user/delete/${userId}`).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  getDownloadReportUrl(transactionId) {\n    return this.api.baseUrl() + `/report/${transactionId}`;\n  }\n  updateRate(payload) {\n    this.api.put(`/exchangeRate/update`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n}\nAdminService.ɵfac = function AdminService_Factory(t) {\n  return new (t || AdminService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AlertService));\n};\nAdminService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AdminService,\n  factory: AdminService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,YAAY;EAEvBC,YACUC,GAAe,EACfC,KAAmB;IADnB,QAAG,GAAHD,GAAG;IACH,UAAK,GAALC,KAAK;EACX;EAIJC,OAAO,CAACC,OAAY;IAClB,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC,0BAA0B,EAAED,OAAO,CAAC,CAACE,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,OAAO,CAAC;EACzG;EACAC,cAAc,CAACL,OAAY;IACzB,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC,uBAAuB,EAAED,OAAO,CAAC,CAACE,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,OAAO,CAAC;EACtG;EACAE,iBAAiB,CAACN,OAAY;IAC5B,IAAI,CAACH,GAAG,CAACU,GAAG,CAAC,yBAAyB,EAAEP,OAAO,CAAC,CAACE,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,OAAO,CAAC;EACvG;EACAI,QAAQ;IACN,OAAO,IAAI,CAACX,GAAG,CAACY,GAAG,CAAC,iBAAiB,CAAC;EACxC;EACAC,QAAQ;IACN,OAAO,IAAI,CAACb,GAAG,CAACY,GAAG,CAAC,kBAAkB,CAAC;EACzC;EACAE,kBAAkB;IAChB,OAAO,IAAI,CAACd,GAAG,CAACY,GAAG,CAAC,kBAAkB,CAAC;EACzC;EACAG,WAAW,CAACZ,OAAY;IACtB,OAAO,IAAI,CAACH,GAAG,CAACI,IAAI,CAAC,eAAe,EAAED,OAAO,CAAC;EAChD;EACAa,aAAa,CAACb,OAAY;IACxB,IAAI,CAACH,GAAG,CAACU,GAAG,CAAC,uBAAuB,EAAEP,OAAO,CAAC,CAACE,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,OAAO,CAAC;EACrG;EAEAU,UAAU,CAACC,MAAW;IACpB,IAAI,CAAClB,GAAG,CAACmB,MAAM,CAAC,gBAAgBD,MAAM,EAAE,CAAC,CAACb,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,OAAO,CAAC;EAChG;EAEAa,oBAAoB,CAACC,aAAkB;IACrC,OAAO,IAAI,CAACrB,GAAG,CAACsB,OAAO,EAAE,GAAG,WAAWD,aAAa,EAAE;EACxD;EAGAE,UAAU,CAACpB,OAAY;IACrB,IAAI,CAACH,GAAG,CAACU,GAAG,CAAC,sBAAsB,EAAEP,OAAO,CAAC,CAACE,SAAS,CAAC,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,OAAO,CAAC;EACpG;;AA7CWT,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA0B,SAAZ1B,YAAY;EAAA2B,YAFX;AAAM","names":["AdminService","constructor","api","alert","addRate","payload","post","subscribe","apiSuccess","apiFail","addBankAccount","updateBankAccount","put","getRates","get","getUsers","getAllTransactions","convertRate","resetPassword","deleteUser","userId","delete","getDownloadReportUrl","transactionId","baseUrl","updateRate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\DTHORGAV\\Downloads\\OneDrive - Capgemini\\Desktop\\OceanCaseStudy\\forex_front\\src\\app\\services\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AlertService } from './alert.service';\nimport { ApiService } from './api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  constructor(\n    private api: ApiService,\n    private alert: AlertService\n  ) { }\n\n\n\n  addRate(payload: any) {\n    this.api.post(`/admin/exchangeRate/save`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  addBankAccount(payload: any) {\n    this.api.post(`/UserBankDetails/save`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  updateBankAccount(payload: any) {\n    this.api.put(`/UserBankDetails/update`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n  getRates() {\n    return this.api.get(`/admin/rate/all`);\n  }\n  getUsers() {\n    return this.api.get('/admin/users/all');\n  }\n  getAllTransactions() {\n    return this.api.get('/transaction/all');\n  }\n  convertRate(payload: any) {\n    return this.api.post('/rate/convert', payload);\n  }\n  resetPassword(payload: any) {\n    this.api.put(`/admin/reset-password`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n\n  deleteUser(userId: any) {\n    this.api.delete(`/user/delete/${userId}`).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n\n  getDownloadReportUrl(transactionId: any) {\n    return this.api.baseUrl() + `/report/${transactionId}`;\n  }\n\n\n  updateRate(payload: any) {\n    this.api.put(`/exchangeRate/update`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}