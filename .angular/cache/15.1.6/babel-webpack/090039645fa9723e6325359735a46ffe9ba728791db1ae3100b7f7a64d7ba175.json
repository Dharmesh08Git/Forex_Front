{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"./alert.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(api, alert, router) {\n    this.api = api;\n    this.alert = alert;\n    this.router = router;\n  }\n  register(data, role) {\n    const isAdmin = role === 'ADMIN';\n    this.api.post(isAdmin ? '/admin/save' : '/user/save', data).subscribe(res => {\n      this.alert.success(res?.message || 'Registration successful.');\n    }, this.alert.apiFail);\n  }\n  login(data, role) {\n    const isAdmin = role === 'ADMIN';\n    this.api.post(isAdmin ? '/admin/login' : `/user/login`, data).subscribe(res => {\n      if (!res?.success) {\n        this.alert.error(\"Wrong credentials\");\n        return;\n      }\n      sessionStorage.setItem('SESSION_USER_DATA', JSON.stringify(res?.data));\n      sessionStorage.setItem('SESSION_ROLE', role);\n      if (isAdmin) this.router.navigateByUrl(\"/admin\");else this.router.navigateByUrl(\"/customer\");\n    }, this.alert.apiFail);\n  }\n  getAdminId() {\n    const admin = this.getUserDetails();\n    return admin?.adminId;\n  }\n  getUserDetails() {\n    console.log('DA');\n    return JSON.parse(sessionStorage.getItem('SESSION_USER_DATA') || '');\n  }\n  sendForgotOTP(email, role) {\n    const isAdmin = role === 'ADMIN';\n    return this.api.post(isAdmin ? `/admin/sendEmail` : `/user/sendEmail`, {\n      email\n    });\n  }\n  forgotPassword(payload, role) {\n    const isAdmin = role === 'ADMIN';\n    this.api.put(isAdmin ? `/admin/forgot-password` : `/user/forgot-password`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AlertService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,GAAe,EAAUC,KAAmB,EAAUC,MAAc;IAApE,QAAG,GAAHF,GAAG;IAAsB,UAAK,GAALC,KAAK;IAAwB,WAAM,GAANC,MAAM;EAAY;EAE5FC,QAAQ,CAACC,IAAS,EAAEC,IAAY;IAC9B,MAAMC,OAAO,GAAGD,IAAI,KAAK,OAAO;IAChC,IAAI,CAACL,GAAG,CAACO,IAAI,CAACD,OAAO,GAAG,aAAa,GAAG,YAAY,EAAEF,IAAI,CAAC,CAACI,SAAS,CAAEC,GAAQ,IAAI;MACjF,IAAI,CAACR,KAAK,CAACS,OAAO,CAACD,GAAG,EAAEE,OAAO,IAAI,0BAA0B,CAAC;IAChE,CAAC,EAAE,IAAI,CAACV,KAAK,CAACW,OAAO,CAAC;EACxB;EAEAC,KAAK,CAACT,IAAS,EAAEC,IAAY;IAC3B,MAAMC,OAAO,GAAGD,IAAI,KAAK,OAAO;IAChC,IAAI,CAACL,GAAG,CAACO,IAAI,CAACD,OAAO,GAAG,cAAc,GAAG,aAAa,EAAEF,IAAI,CAAC,CAACI,SAAS,CAAEC,GAAQ,IAAI;MACnF,IAAI,CAACA,GAAG,EAAEC,OAAO,EAAE;QACjB,IAAI,CAACT,KAAK,CAACa,KAAK,CAAC,mBAAmB,CAAC;QACrC;;MAEFC,cAAc,CAACC,OAAO,CAAC,mBAAmB,EAAEC,IAAI,CAACC,SAAS,CAACT,GAAG,EAAEL,IAAI,CAAC,CAAC;MACtEW,cAAc,CAACC,OAAO,CAAC,cAAc,EAAEX,IAAI,CAAC;MAC5C,IAAIC,OAAO,EACT,IAAI,CAACJ,MAAM,CAACiB,aAAa,CAAC,QAAQ,CAAC,MAEnC,IAAI,CAACjB,MAAM,CAACiB,aAAa,CAAC,WAAW,CAAC;IAE1C,CAAC,EAAE,IAAI,CAAClB,KAAK,CAACW,OAAO,CAAC;EACxB;EAEAQ,UAAU;IACR,MAAMC,KAAK,GAAG,IAAI,CAACC,cAAc,EAAE;IACnC,OAAOD,KAAK,EAAEE,OAAO;EACvB;EAEAD,cAAc;IACZE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACjB,OAAOR,IAAI,CAACS,KAAK,CAACX,cAAc,CAACY,OAAO,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC;EACtE;EAEAC,aAAa,CAACC,KAAa,EAAExB,IAAY;IACvC,MAAMC,OAAO,GAAGD,IAAI,KAAK,OAAO;IAChC,OAAO,IAAI,CAACL,GAAG,CAACO,IAAI,CAACD,OAAO,GAAG,kBAAkB,GAAG,iBAAiB,EAAE;MAAEuB;IAAK,CAAE,CAAC;EACnF;EAEAC,cAAc,CAACC,OAAY,EAAE1B,IAAY;IACvC,MAAMC,OAAO,GAAGD,IAAI,KAAK,OAAO;IAChC,IAAI,CAACL,GAAG,CAACgC,GAAG,CAAC1B,OAAO,GAAG,wBAAwB,GAAG,uBAAuB,EAAEyB,OAAO,CAAC,CAACvB,SAAS,CAAC,IAAI,CAACP,KAAK,CAACgC,UAAU,EAAE,IAAI,CAAChC,KAAK,CAACW,OAAO,CAAC;EAC1I;;AA9CWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoC,SAAXpC,WAAW;EAAAqC,YAFV;AAAM","names":["AuthService","constructor","api","alert","router","register","data","role","isAdmin","post","subscribe","res","success","message","apiFail","login","error","sessionStorage","setItem","JSON","stringify","navigateByUrl","getAdminId","admin","getUserDetails","adminId","console","log","parse","getItem","sendForgotOTP","email","forgotPassword","payload","put","apiSuccess","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\DTHORGAV\\Downloads\\OneDrive - Capgemini\\Desktop\\OceanCaseStudy\\forex_front\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AlertService } from './alert.service';\nimport { ApiService } from './api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private api: ApiService, private alert: AlertService, private router: Router) { }\n\n  register(data: any, role: string) {\n    const isAdmin = role === 'ADMIN';\n    this.api.post(isAdmin ? '/admin/save' : '/user/save', data).subscribe((res: any) => {\n      this.alert.success(res?.message || 'Registration successful.')\n    }, this.alert.apiFail);\n  }\n\n  login(data: any, role: string) {\n    const isAdmin = role === 'ADMIN';\n    this.api.post(isAdmin ? '/admin/login' : `/user/login`, data).subscribe((res: any) => {\n      if (!res?.success) {\n        this.alert.error(\"Wrong credentials\");\n        return;\n      }\n      sessionStorage.setItem('SESSION_USER_DATA', JSON.stringify(res?.data));\n      sessionStorage.setItem('SESSION_ROLE', role);\n      if (isAdmin)\n        this.router.navigateByUrl(\"/admin\")\n      else\n        this.router.navigateByUrl(\"/customer\")\n\n    }, this.alert.apiFail);\n  }\n\n  getAdminId() {\n    const admin = this.getUserDetails();\n    return admin?.adminId;\n  }\n\n  getUserDetails() {\n    console.log('DA')\n    return JSON.parse(sessionStorage.getItem('SESSION_USER_DATA') || '');\n  }\n\n  sendForgotOTP(email: string, role: string) {\n    const isAdmin = role === 'ADMIN';\n    return this.api.post(isAdmin ? `/admin/sendEmail` : `/user/sendEmail`, { email });\n  }\n\n  forgotPassword(payload: any, role: string) {\n    const isAdmin = role === 'ADMIN';\n    this.api.put(isAdmin ? `/admin/forgot-password` : `/user/forgot-password`, payload).subscribe(this.alert.apiSuccess, this.alert.apiFail);\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}